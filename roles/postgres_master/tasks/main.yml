---
- name: Install PostgreSQL packages (default version)
  apt:
    name:
      - postgresql
      - postgresql-client
      - postgresql-contrib
      - python3-psycopg2
    state: present
    update_cache: yes

- name: Get PostgreSQL version
  shell: "ls /etc/postgresql/ | head -1"
  register: pg_version
  changed_when: false

- name: Check if postgresql service exists
  stat:
    path: /lib/systemd/system/postgresql.service
  register: postgresql_service

- name: Check if postgresql@version service exists
  shell: "systemctl list-unit-files | grep postgresql@ | head -1 | awk '{print $1}'"
  register: postgresql_versioned_service
  changed_when: false
  ignore_errors: yes

- name: Start and enable PostgreSQL (standard service)
  systemd:
    name: postgresql
    state: started
    enabled: yes
  when: postgresql_service.stat.exists
  ignore_errors: yes

- name: Start and enable PostgreSQL (versioned service)
  systemd:
    name: "{{ postgresql_versioned_service.stdout }}"
    state: started
    enabled: yes
  when: postgresql_versioned_service.stdout != "" and not postgresql_service.stat.exists
  ignore_errors: yes

- name: Debug PostgreSQL service issue
  debug:
    msg: "PostgreSQL service not found. Checked: postgresql and versioned services"
  when: not postgresql_service.stat.exists and postgresql_versioned_service.stdout == ""

- name: Set PostgreSQL password for postgres user
  postgresql_user:
    name: postgres
    password: "{{ vault_postgres_password }}"
  become_user: postgres
  when: postgresql_service.stat.exists or postgresql_versioned_service.stdout != ""

- name: Create application database
  postgresql_db:
    name: "{{ db_name }}"
    owner: postgres
  become_user: postgres
  when: postgresql_service.stat.exists or postgresql_versioned_service.stdout != ""

- name: Create application user
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    db: "{{ db_name }}"
    priv: ALL
  become_user: postgres
  when: postgresql_service.stat.exists or postgresql_versioned_service.stdout != ""

- name: Create replication user
  postgresql_user:
    name: "{{ vault_db_replication_user }}"
    password: "{{ vault_db_replication_password }}"
    role_attr_flags: REPLICATION
  become_user: postgres
  when: postgresql_service.stat.exists or postgresql_versioned_service.stdout != ""

- name: Configure PostgreSQL for replication
  lineinfile:
    path: "/etc/postgresql/{{ pg_version.stdout }}/main/postgresql.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backup: yes
  loop:
    - { regexp: '^#?listen_addresses', line: "listen_addresses = '*'" }
    - { regexp: '^#?wal_level', line: "wal_level = replica" }
    - { regexp: '^#?max_wal_senders', line: "max_wal_senders = 3" }
    - { regexp: '^#?wal_keep_size', line: "wal_keep_size = 64MB" }
    - { regexp: '^#?hot_standby', line: "hot_standby = on" }
  notify: restart postgresql
  when: postgresql_service.stat.exists or postgresql_versioned_service.stdout != ""

- name: Configure pg_hba.conf for replication
  blockinfile:
    path: "/etc/postgresql/{{ pg_version.stdout }}/main/pg_hba.conf"
    block: |
      # Replication connections
      host replication {{ vault_db_replication_user }} 192.168.0.208/32 md5
      # Application connections
      host {{ db_name }} {{ db_user }} 192.168.0.209/32 md5
      host {{ db_name }} {{ db_user }} 127.0.0.1/32 md5
    backup: yes
  notify: restart postgresql
  when: postgresql_service.stat.exists or postgresql_versioned_service.stdout != ""

- name: Create clicks table
  postgresql_query:
    db: "{{ db_name }}"
    query: |
      CREATE TABLE IF NOT EXISTS clicks (
        id SERIAL PRIMARY KEY,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        ip_address INET NOT NULL,
        user_agent TEXT,
        gclid VARCHAR(255),
        clickid VARCHAR(255),
        utm_source VARCHAR(255),
        utm_medium VARCHAR(255),
        utm_campaign VARCHAR(255),
        utm_term VARCHAR(255),
        utm_content VARCHAR(255),
        country VARCHAR(2),
        asn INTEGER,
        ipqs_score INTEGER,
        decision VARCHAR(20) NOT NULL,
        redirect_url TEXT,
        processing_time_ms INTEGER
      );
      CREATE INDEX IF NOT EXISTS idx_clicks_timestamp ON clicks(timestamp);
      CREATE INDEX IF NOT EXISTS idx_clicks_ip ON clicks(ip_address);
      CREATE INDEX IF NOT EXISTS idx_clicks_decision ON clicks(decision);
  become_user: postgres
  when: postgresql_service.stat.exists or postgresql_versioned_service.stdout != ""

- name: Setup backup script
  template:
    src: backup_script.sh.j2
    dest: /usr/local/bin/backup_postgres.sh
    mode: '0755'

- name: Setup backup cron job
  cron:
    name: "PostgreSQL backup"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/backup_postgres.sh"
    user: postgres
